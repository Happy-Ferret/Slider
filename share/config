!! Slider resource database
!! By: Jesse McClure (c) 2014
!! License: CC-BY-SA

!! Configuration uses the X resource database system.
!! Various documentation for X resource databases can be found online.
!! The following may be good sources:
!! http://tronche.com/gui/x/xlib/resource-manager/
!! http://tronche.com/gui/x/xlib/resource-manager/file-syntax.html
!! http://tronche.com/gui/x/xlib/resource-manager/matching-rules.html

!! In this default config, double !! indicate lines that are comments
!!   purely for informational purposes, while a single ! will be used
!!   to "commement out" optional settings.


!! GENERAL SETTINGS:
!!   Monitor     sequential number of the primary monitor
!!   Fade        number of steps in the crossfade effect between slides
!!   Loop        true = return to first slide at end of show
!!   LockAspect  true = do not scale pdf, add black bars as need
!!               false = scale pdf to the screen geometry
*.Monitor:				1
*.Fade:					25
*.Loop:					false
*.Interleave:			false
*.LockAspect:			true

!! VIEWS:
!! Views only apply when a second output is connected.  One output
!!   will show the presentation fullscreen, the other output can have
!!   several windows displaying different slides/previews
!! Define as many views as you like, numbering from 00-99.  Each view
!!   must have a geometry using a "xterm-style" geometry string.  Each
!!   view must also have a show number where 0 is the main slideshow pdf
!!   and 1 is a secondary notes pdf.  Each view must also have an offset
!!   that defines the slide number to be displayed relative to the slide
!!   number shown on the primary output.
!!
!! The default setting below creates three windowed views.  The largest
!!   shows the current as it is displayed on the main output (e.g. what
!!   your audience is seeing).  The second shows a preview of the next
!!   slide to be shown on the main output.  The smallest shows the
!!   previous slide.
*.View.00.Geometry:		800x600+0+1024
*.View.00.Show:			0
*.View.00.Offset:			0
*.View.01.Geometry:		480x360+800+1040
*.View.01.Show:			0
*.View.01.Offset:			1
*.View.02.Geometry:		240x180+800+1460
*.View.02.Show:			0
*.View.02.Offset:			-1
!! The Note class below overrides the above default and created three
!!   different views.  The largest shows the current notes slide (e.g.
!!   notes for the presentor).  The second mirrors what the audience is
!!   seeing.  The smallest previews the next slide.
Note.View.00.Geometry:		800x600+10+800
Note.View.00.Show:			1
Note.View.00.Offset:			0
Note.View.01.Geometry:		480x360+10+1400
Note.View.01.Show:			0
Note.View.01.Offset:			0
Note.View.02.Geometry:		480x360+10+1400
Note.View.02.Show:			0
Note.View.02.Offset:			1

!! MEDIA HANDLERS:
!! Slider handles a majority of embedded media types and action links.
!! If you find unhandled or improperly handled links or media, please
!!   open a bug report with details.
!! Slider must know what you want it to do with each type of embedded
!!   media or link.  A couple example defaults are provided below
!! Media handlers can included any of the following specifiers:
!!   %s        target file or url
!!   %x | %X   x coordinate of the bounding box in the pdf
!!   %y | %Y   y coordinate of the bounding box in the pdf
!!   %w | %W   width of the bounding box in the pdf
!!   %h | %H   height of the bounding box in the pdf
!!   %%        produces a single percent sign
*.Media.Link:			firefox %s > /dev/null 2>&1
*.Media.Movie:			mplayer -noborder -nokeepaspect -geometry %Wx%H+%X+%Y %s >/dev/null 2>&1
!*.Media.Movie:		mplayer -fs %s > /dev/null 2>&1
*.Media.Sound:			mplayer %s > /dev/null 2>&1 &
*.Media.Widget:		/home/jmcclure/code/slider/interro %W %H %X %Y %s


!! CONTROLS & BINDINGS:
!! Each binding takes a single slider command.
!!   For full documentation of commands, see `man slider`.
!!   Examples for many common commands are provided below.
!
!! Mouse Buttons:
!! Slider will recognize as many buttons as are provided by the X server
!! Generally, X will report events for 12 mouse buttons as follows:
!!   1 - left button, 2 - middle button, 3 - right button
!!   4 - scroll down, 5 - scroll up, 6 - scroll left, 7 - scroll right
!!   8-12 have no generic meaning and are various "extra" buttons
*.Button.01:			next
*.Button.02:			sorter
*.Button.03:			prev
*.Button.04:			mute black
*.Button.05:			mute white

!! Keyboard:
!! Define as many key bindings as you like, numbering from 00-99.
!! Each Bind requires the 'Key' element to define the modifier-free
!!   key string that is to be bound.  Each Bind can then have any of the
!!   following modifier entries for that key: None, Control, Alt, Shift.
!!   Each modifier entry is bound to a slider command.
!! Bind 00 below defines Control-q as the "quit" command.
!! Bind 01 below defines <Return> with no modifier as "redraw".
!! Bind 20 uses two different modifiers: Tab will show the sorter while
!!   Control-Tab toggles the fullscreen state.
*.Bind.00.Key:			q
*.Bind.00.Control:	quit
*.Bind.01.Key:			Return
*.Bind.01.None:		redraw
! slide forward/back
*.Bind.10.Key:			Up
*.Bind.10.None:		prev
*.Bind.11.Key:			Down
*.Bind.11.None:		next
*.Bind.12.Key:			Prior
*.Bind.12.None:		prev
*.Bind.13.Key:			Next
*.Bind.13.None:		next
*.Bind.14.Key:			space
*.Bind.14.None:		next
! sorter + muting
*.Bind.20.Key:			Tab
*.Bind.20.None:		sorter
*.Bind.20.Control:	fullscreen
*.Bind.21.Key:			b
*.Bind.21.None:		mute black
*.Bind.22.Key:			w
*.Bind.22.None:		mute white
!! Slider has a few drawing options and creative cursors
!! Each of these commands follows the following general format:
!!   <type> <RGBA> <size> <string>
!!     type = pen, dot, custom
!!     RGBA = red, green, blue, alpha 0.00-1.00
!!     size = width for pen, radius for dot, font size for custom
!!     string = text to show for cursor (custom mode only)
*.Bind.31.Key:			1
*.Bind.31.None:		pen 1.0 0.0 0.0 0.8 24
*.Bind.31.Control:	dot 1.0 0.0 0.0 0.8 24
*.Bind.31.Alt:			custom 1.0 0.0 0.0 0.8 48 Slider
*.Bind.32.Key:			2
*.Bind.32.None:		pen 0.0 1.0 0.0 0.8 12
*.Bind.32.Control:	dot 0.0 1.0 0.0 0.8 12
*.Bind.32.Alt:			custom 0.0 1.0 0.0 0.8 24 ^
*.Bind.33.Key:			3
*.Bind.33.None:		pen 0.0 0.0 1.0 0.8 18
*.Bind.33.Control:	dot 0.0 0.0 1.0 0.8 18
*.Bind.33.Alt:			custom 0.0 0.0 1.0 0.8 36 > <
!! The following bindings activate links and/or embedded media
!! These all start with the action command.  With no parameter this
!!   enables mouse-mode: click on the action/media link to activate it.
!! The "action" command can accept a numerical argument which will
!!   activate the Nth link on the current page.
!! The "action" command can also be provided with a link type name
!!   This is not yet implemented
*.Bind.40.Key:			a
*.Bind.40.None:		action
*.Bind.40.Shift:		action 1
*.Bind.40.Control:	action 2
*.Bind.40.Alt:			action 3
!! The "zoom" command can be provided with an RGBA string for a bounding
!!   box that will be drawn with the mouse to select an area to zoom to
!! The "zoom" command can also be provided with a "quad" parameter to
!!   zoom into one quadrant of the current slide.
*.Bind.51.Key:			z
*.Bind.51.None:		zoom 0.0 1.0 0.0 0.8 4.0
*.Bind.52.Key:			bracketleft
*.Bind.52.None:		zoom quad 3
*.Bind.52.Shift:		zoom quad 1
*.Bind.53.Key:			bracketright
*.Bind.53.None:		zoom quad 4
*.Bind.53.Shift:		zoom quad 2

!! vim: ft=xdefaults

